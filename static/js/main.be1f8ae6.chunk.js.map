{"version":3,"sources":["Dot.js","Calendar.js","Display.js","Connections.js","DataViz2019.js","App.js","serviceWorker.js","index.js"],"names":["Dot","props","handleClick","bind","handleMouseEnter","handleMouseLeave","e","momentIds","this","moments","map","moment","id","handlers","updateMomentsHovered","updateMomentsClicked","hasMoments","length","symbol","hoverable","className","highlight","onClick","onMouseEnter","onMouseLeave","Component","Calendar","state","dates","makeDates","current","Date","end","setDate","getDate","getDay","push","setState","dots","date","findMoments","checkHighlight","key","toString","dateMoments","appState","momentsIndex","m","getTime","clickedGuest","guestsIndex","guestClicked","hoveredGuest","guestHovered","selectedGuest","selectedGuestMoments","moment_ids","includesMoments","momentsHovered","momentsClicked","connectedMoments","connections","find","c","guestId","array","includes","makeDots","Display","handleCloseClick","handleGuestMouseEnter","handleGuestMouseLeave","handleGuestClick","handleMomentMouseEnter","handleMomentMouseLeave","handleMomentClick","handleConnectionsClick","guest","updateGuestClicked","updateGuestHovered","parseInt","target","updateShowConnections","showConnections","type","object","dateString","toDateString","replace","black","title","moment_type","name","renderGuestMoments","guests","yellow","i","renderMomentGuests","content","renderGuest","renderMoments","renderClose","Connections","prevProps","prevState","momentId","guest_ids","displayedGuest","list","connection","connectedGuest","shouldHighlight","renderConnectedGuests","DataViz2019","loading","require","converted","convertDates","setGuest","dateArray","split","location","hash","Object","keys","toLowerCase","clearGuests","val","clicked","hovered","weaveMoments","ids","hydrateList","index","momentsDisplayed","guestDisplayed","App","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be1f8ae6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Dot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n  }\n\n  handleMouseEnter(e) {\n    const momentIds = this.props.moments.map(moment => moment.id)\n    this.props.handlers.updateMomentsHovered(momentIds);\n  }\n\n  handleMouseLeave(e) {\n    // Clear the ids\n    this.props.handlers.updateMomentsHovered([]);\n  }\n\n  handleClick(e) {\n    const momentIds = this.props.moments.map(moment => moment.id)\n    this.props.handlers.updateMomentsClicked(momentIds);\n  }\n\n  render() {\n    const hasMoments = this.props.moments.length\n    const symbol = hasMoments ? \"# \" : \". \";\n    const hoverable = hasMoments ? \"hoverable\" : \"\";\n\n    return (\n      <span\n        className={`Dot ${hoverable} ${this.props.highlight}`}\n        onClick={this.handleClick}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        {symbol}\n      </span>\n    )\n  }\n}\n\nexport default Dot;\n","import React, { Component } from 'react';\nimport Dot from './Dot';\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dates: null\n    };\n  }\n\n  componentDidMount() {\n    this.makeDates();\n  }\n\n  makeDates() {\n    const current = new Date(2019, 0, 1);\n    const end = new Date(2020, 0, 1);\n    const dates = [];\n\n    // Set the current date to be the Sunday before the new year.\n    current.setDate(current.getDate() - current.getDay());\n\n    while (current < end) {\n      dates.push(new Date(current));\n      current.setDate(current.getDate() + 1);\n    }\n\n    this.setState({ dates });\n  }\n\n  // Returns an array of <Dot/> components (with <br/> elements)\n  makeDots() {\n    if (!this.state.dates) return;\n\n    const dots = [];\n\n    // For each date in state, make a dot; add moment data if applicable\n    for (let date of this.state.dates) {\n      const moments = this.findMoments(date);\n      const highlight = this.checkHighlight(moments);\n\n      dots.push(<Dot\n        key={date.toString()}\n        moments={moments}\n        highlight={highlight}\n        handlers={this.props.handlers}\n      />)\n\n      // If the date is a Saturday, add a line break\n      if (date.getDay() === 6) {\n        dots.push(\n          <br key={`br-${date.toString()}`} />\n        );\n      }\n    }\n\n    return dots;\n  }\n\n  // Returns an array of the moments that took place on the given date\n  findMoments(date) {\n    const dateMoments = [];\n    const moments = this.props.appState.momentsIndex;\n\n    for (let m in moments) {\n      // If the moment date matches the given date, add it to our array\n      if (moments[m].date.getTime() === date.getTime()) {\n        dateMoments.push(moments[m])\n      }\n    }\n\n    return dateMoments;\n  }\n\n  // returns \"yellow\" or \"black\" or \"\"\n  checkHighlight(moments) {\n    let highlight = \"\";\n    const appState = this.props.appState;\n    const clickedGuest = appState.guestsIndex[appState.guestClicked];\n    const hoveredGuest = appState.guestsIndex[appState.guestHovered];\n    const selectedGuest = clickedGuest || hoveredGuest;\n    const selectedGuestMoments = selectedGuest && selectedGuest.moment_ids;\n\n    // The dot should be yellow if a moment that it represents is hovered or\n    // clicked anywhere; or if a moment that it represents is included in the\n    // list of guest moments\n    if (\n      this.includesMoments(moments, appState.momentsHovered) ||\n      this.includesMoments(moments, appState.momentsClicked) ||\n      this.includesMoments(moments, selectedGuestMoments)\n    ) {\n      highlight = \"yellow\";\n    }\n\n    // GUEST CLICKED && MOMENT HOVERED\n    // The dot should be black if a guest is clicked and a guest moment is\n    // hovered.\n    if (\n      clickedGuest &&\n      this.includesMoments(moments, appState.momentsHovered) &&\n      this.includesMoments(moments, selectedGuestMoments)\n    ) {\n      highlight = \"black\";\n    }\n\n    // GUEST CLICKED && GUEST HOVERED\n    // The dot should be black if a guest is clicked and the hovered connected\n    // guest shares a moment\n    if (clickedGuest && hoveredGuest) {\n      const connection = clickedGuest.connections.find((c) => {\n        return c.guestId === hoveredGuest.id;\n      });\n\n      const connectedMoments = connection.momentIds;\n\n      if (this.includesMoments(moments, connectedMoments)) {\n        highlight = \"black\";\n      }\n    }\n\n    return highlight;\n  }\n\n  includesMoments(moments, array) {\n    if (array) {\n      for (let m of moments) {\n        if (array.includes(m.id)) return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    return (\n      <div className=\"Calendar\">\n        {this.makeDots()}\n      </div>\n    )\n  }\n}\n\nexport default Calendar;\n","import React, { Component } from 'react';\n\nconst MOMENT = \"moment\";\nconst GUEST = \"guest\";\n\nclass Display extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCloseClick = this.handleCloseClick.bind(this);\n    this.handleGuestMouseEnter = this.handleGuestMouseEnter.bind(this);\n    this.handleGuestMouseLeave = this.handleGuestMouseLeave.bind(this);\n    this.handleGuestClick = this.handleGuestClick.bind(this);\n    this.handleMomentMouseEnter = this.handleMomentMouseEnter.bind(this);\n    this.handleMomentMouseLeave = this.handleMomentMouseLeave.bind(this);\n    this.handleMomentClick = this.handleMomentClick.bind(this);\n    this.handleConnectionsClick = this.handleConnectionsClick.bind(this);\n  }\n\n  handleCloseClick(e) {\n    this.props.guest ?\n      this.props.handlers.updateGuestClicked(null) :\n      this.props.handlers.updateMomentsClicked([]);\n  }\n\n  handleGuestMouseEnter(e) {\n    this.props.handlers.updateGuestHovered(parseInt(e.target.id));\n  }\n\n  handleGuestMouseLeave(e) {\n    this.props.handlers.updateGuestHovered(null);\n  }\n\n  handleGuestClick(e) {\n    this.props.handlers.updateGuestClicked(parseInt(e.target.id));\n  }\n\n  handleMomentMouseEnter(e) {\n    this.props.handlers.updateMomentsHovered([parseInt(e.target.id)]);\n  }\n\n  handleMomentMouseLeave(e) {\n    this.props.handlers.updateMomentsHovered([]);\n  }\n\n  handleMomentClick(e) {\n    this.props.handlers.updateMomentsClicked([parseInt(e.target.id)]);\n  }\n\n  handleConnectionsClick(e) {\n    this.props.handlers.updateShowConnections(!this.props.appState.showConnections);\n  }\n\n  checkHighlight(type, object) {\n    const appState = this.props.appState;\n\n    if (type === GUEST) {\n      return appState.guestHovered && appState.guestHovered === object.id;\n    }\n\n    if (type === MOMENT) {\n      // A moment is highlighted if it’s hovered, or if a guest that was at this\n      // moment is hovered.\n      return (appState.momentsHovered && appState.momentsHovered.includes(object.id)) ||\n        (appState.guestHovered && appState.guestsIndex[appState.guestHovered].moment_ids.includes(object.id));\n    }\n  }\n\n  renderGuestMoments(guest) {\n    if (guest.moments && guest.moments.length > 0) {\n      return guest.moments.map((moment) => {\n        if (!moment) return null;\n        const dateString = moment.date.toDateString().replace(' 2019', '');\n        const black = this.checkHighlight(MOMENT, moment) ? \"black\" : \"\";\n\n        return (\n          <li\n            key={moment.id}\n            id={moment.id}\n            className={`guestMoment ${black}`}\n            onMouseEnter={this.handleMomentMouseEnter}\n            onMouseLeave={this.handleMomentMouseLeave}\n            onClick={this.handleMomentClick}\n          >\n            {dateString} — {moment.title || moment.moment_type}\n          </li>\n        )\n      })\n    }\n  }\n\n  renderGuest() {\n    const guest = this.props.guest;\n    return (\n      <div className=\"guest\">\n        <div>{guest.name}</div>\n        <div>\n          <div>Moments: {guest.moments.length}</div>\n          <ul>\n            {this.renderGuestMoments(guest)}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n\n  renderMomentGuests(moment) {\n    if (moment.guests && moment.guests.length > 0) {\n      return moment.guests.map((guest) => {\n        if (!guest) return null;\n        const yellow = this.checkHighlight(GUEST, guest) ? \"yellow\" : \"\";\n        return (\n          <li\n            key={guest.id}\n            id={guest.id}\n            className={`momentGuest ${yellow}`}\n            onMouseEnter={this.handleGuestMouseEnter}\n            onMouseLeave={this.handleGuestMouseLeave}\n            onClick={this.handleGuestClick}\n          >\n            {guest.name}\n          </li>\n        )\n      })\n    }\n  }\n\n  renderMoments() {\n    if (this.props.moments && this.props.moments.length > 0) {\n      const moments = this.props.moments.map((moment, i) => {\n        return (\n          <div key={i} className=\"moment\">\n            { moment.title || moment.moment_type }\n            <ul>\n              {this.renderMomentGuests(moment)}\n            </ul>\n            { i >= this.props.moments.length - 1 ? \"\" : <hr/> }\n          </div>\n        )\n      });\n\n      return (\n        <div>\n          <div className=\"momentDate\">\n            {this.props.moments[0].date.toDateString()}\n          </div>\n          {moments}\n        </div>\n      )\n    }\n\n    return \"← hover over a #\"\n  }\n\n  renderClose() {\n    const appState = this.props.appState;\n\n    if (\n      (appState.momentsClicked && appState.momentsClicked.length > 0) ||\n      appState.guestClicked\n    ) {\n      return (\n        <div className=\"close\" onClick={this.handleCloseClick}>x </div>\n      )\n    }\n  }\n\n  render() {\n    const content = this.props.guest ? this.renderGuest() : this.renderMoments();\n\n    return (\n      <div className=\"Display\">\n        {content}\n        {this.renderClose()}\n      </div>\n    )\n  }\n}\n\nexport default Display;\n","import React, { Component } from 'react';\n\nclass Connections extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      guest: null\n    }\n\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const guest = this.props.appState.guestsIndex[this.props.appState.guestClicked]\n    if (prevState.guest !== guest) {\n      this.setState({ guest })\n    }\n  }\n\n  handleMouseEnter(e) {\n    this.props.handlers.updateGuestHovered(parseInt(e.target.id));\n  }\n\n  handleMouseLeave(e) {\n    this.props.handlers.updateGuestHovered(null);\n  }\n\n  handleClick(e) {\n    this.props.handlers.updateGuestClicked(parseInt(e.target.id));\n  }\n\n  shouldHighlight(guest) {\n    const moments = this.props.appState.momentsHovered.map((momentId) => {\n      return this.props.appState.momentsIndex[momentId]\n    })\n\n    for (let m of moments) {\n      if (m.guest_ids.includes(guest.id)) return true;\n    }\n\n    return false\n  }\n\n  renderConnectedGuests() {\n    const displayedGuest = this.state.guest;\n    if (!displayedGuest) return;\n    const connections = displayedGuest.connections;\n    const list = connections.map((connection) => {\n      const connectedGuest = this.props.appState.guestsIndex[connection.guestId];\n      const black = this.shouldHighlight(connectedGuest) ? \"black\" : \"\"\n      return (\n        <li\n          key={`${displayedGuest.id}-${connectedGuest.id}`}\n          id={connectedGuest.id}\n          className={`connectedGuest ${black}`}\n          onMouseEnter={this.handleMouseEnter}\n          onMouseLeave={this.handleMouseLeave}\n          onClick={this.handleClick}\n        >\n          {connectedGuest.name} ({connection.momentIds.length})\n        </li>\n      )\n    })\n\n    return (\n      <ul>\n        {list}\n      </ul>\n    )\n  }\n\n  render() {\n    const guest = this.state.guest;\n    if (!guest) return null;\n\n    return (\n      <div className=\"Connections\">\n        <br/>\n        <div>Connections: {guest.connections.length}</div>\n        {this.renderConnectedGuests()}\n      </div>\n    )\n  }\n}\n\nexport default Connections;\n","import React, { Component } from 'react';\nimport Calendar from './Calendar';\nimport Display from './Display';\nimport Connections from './Connections';\n\nclass DataViz2019 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      momentsIndex: {}, // { id: {id, date, guestIds: [id, id id] ...} ... }\n      guestsIndex: {}, // { id: {id, name, full_name, momentIds: [id, id id] ...} ... }\n      momentsHovered: [], // [ id, id, id ... ]\n      momentsClicked: [], // [ id, id, id ... ]\n      guestHovered: null, // id\n      guestClicked: null, // id\n      showConnections: false // boolean\n    };\n\n    this.handlers = {\n      updateMomentsHovered: this.updateMomentsHovered.bind(this),\n      updateMomentsClicked: this.updateMomentsClicked.bind(this),\n      updateGuestHovered: this.updateGuestHovered.bind(this),\n      updateGuestClicked: this.updateGuestClicked.bind(this),\n      updateShowConnections: this.updateShowConnections.bind(this)\n    }\n  }\n\n  componentDidMount() {\n    const moments = require('./moments');\n    const converted = this.convertDates(moments);\n    this.setState({ momentsIndex: converted });\n\n    const guests = require('./guests');\n    this.setState({ guestsIndex: guests }, this.setGuest);\n  }\n\n  // Converts the dates from the server (ruby) into javascript\n  convertDates(moments) {\n    for (let m in moments) {\n      const dateArray = moments[m].date.split(\"-\")\n      moments[m].date = new Date(`${dateArray[0]}/${dateArray[1]}/${dateArray[2]}`);\n    }\n\n    return moments;\n  }\n\n  setGuest() {\n    const name = this.props.location.hash.replace(\"#\",\"\");\n    if (name) {\n      const guests = this.state.guestsIndex;\n      const guest = Object.keys(guests).find((guestId) => {\n        return guests[guestId].name.toLowerCase() === name;\n      })\n\n      if (guest) {\n        this.setState({ guestClicked: guest }, () => {\n          this.setState({ loading: false })\n        });\n      }\n    }\n  }\n\n  updateMomentsHovered(momentIds) {\n    this.setState({ momentsHovered: momentIds });\n  }\n\n  // If you don’t want the side-effect of clearing the guests, pass a falsy\n  // second argument.\n  updateMomentsClicked(momentIds, clearGuests = true) {\n    this.setState({ momentsClicked: momentIds });\n    // Clear out the moment hovered or it might never happen\n    this.updateMomentsHovered([]);\n    // Clear out guest clicked, too\n    if (clearGuests) this.updateGuestClicked(null);\n  }\n\n  updateGuestHovered(guestId) {\n    this.setState({ guestHovered: guestId });\n  }\n\n  updateGuestClicked(guestId) {\n    this.setState({ guestClicked: guestId });\n    // Clear out the guest hovered or it might never happen\n    this.updateGuestHovered(null);\n  }\n\n  updateShowConnections(val) {\n    this.setState({ showConnections: val });\n  }\n\n  momentsDisplayed() {\n    const clicked = this.state.momentsClicked;\n    const hovered = this.state.momentsHovered;\n    if (!clicked && !hovered) return [];\n\n    if (clicked && clicked.length > 0) {\n      return this.weaveMoments(clicked)\n    }\n\n    if (hovered && hovered.length > 0) {\n      return this.weaveMoments(hovered)\n    }\n\n    return [];\n  }\n\n  // Given a list of moment ids, get their moment objects from the momentIndex\n  // and weave in the guests.\n  weaveMoments(ids) {\n    const moments = this.hydrateList(ids, this.state.momentsIndex);\n\n    for (let m of moments) {\n      m.guests = this.hydrateList(m.guest_ids, this.state.guestsIndex);\n    }\n\n    return moments;\n  }\n\n  guestDisplayed() {\n    if (!this.state.guestClicked) return null;\n\n    // Make a copy of the guest from the index and hydrate the list of moments\n    const guest = {...this.state.guestsIndex[this.state.guestClicked]};\n    guest.moments = this.hydrateList(guest.moment_ids, this.state.momentsIndex);\n\n    return guest;\n  }\n\n  // Given a list of ids and an object to look them up in, return an array of\n  // the looked-up values\n  hydrateList(ids, index) {\n    return ids.map((id) => {\n      // return a copy, not the real thing\n      return {...index[id]};\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"DataViz2019\">\n        <div className=\"fullHeightContainer\">\n          <Calendar\n            appState={this.state}\n            handlers={this.handlers}\n          />\n        </div>\n        <div className=\"fullHeightContainer\">\n          <Display\n            moments={this.momentsDisplayed()}\n            guest={this.guestDisplayed()}\n            appState={this.state}\n            handlers={this.handlers}\n          />\n        </div>\n        <div className=\"fullHeightContainer\">\n          <Connections\n            appState={this.state}\n            handlers={this.handlers}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DataViz2019;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport DataViz2019 from './DataViz2019';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path='/' component={DataViz2019} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}