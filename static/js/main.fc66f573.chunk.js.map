{"version":3,"sources":["Dot.js","Calendar.js","Display.js","DataViz2019.js","App.js","serviceWorker.js","index.js"],"names":["Dot","props","handleClick","bind","handleMouseEnter","handleMouseLeave","e","momentIds","this","moments","map","moment","id","handlers","updateMomentsHovered","updateMomentsClicked","hasMoments","length","symbol","hoverable","className","highlight","onClick","onMouseEnter","onMouseLeave","Component","Calendar","state","dates","makeDates","current","Date","end","setDate","getDate","getDay","push","setState","dots","date","findMoments","findHighlight","key","toString","dateMoments","appState","momentsIndex","m","getTime","selectedGuest","guestHovered","guestClicked","guestMoments","guestsIndex","moment_ids","includesMoments","momentsHovered","momentsClicked","array","includes","makeDots","Display","handleCloseClick","handleGuestMouseEnter","handleGuestMouseLeave","handleGuestClick","handleMomentMouseEnter","handleMomentMouseLeave","handleMomentClick","guest","updateGuestClicked","updateGuestHovered","parseInt","target","type","object","dateString","toDateString","replace","black","isHovered","title","moment_type","name","renderGuestMoments","guests","yellow","i","renderMomentGuests","content","renderGuest","renderMoments","renderClose","DataViz2019","loading","require","converted","convertDates","setGuest","dateArray","split","location","hash","Object","keys","find","guestId","toLowerCase","clearGuests","clicked","hovered","weaveMoments","ids","hydrateList","guest_ids","index","momentsDisplayed","guestDisplayed","App","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc66f573.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Dot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n  }\n\n  handleMouseEnter(e) {\n    const momentIds = this.props.moments.map(moment => moment.id)\n    this.props.handlers.updateMomentsHovered(momentIds);\n  }\n\n  handleMouseLeave(e) {\n    // Clear the ids\n    this.props.handlers.updateMomentsHovered([]);\n  }\n\n  handleClick(e) {\n    const momentIds = this.props.moments.map(moment => moment.id)\n    this.props.handlers.updateMomentsClicked(momentIds);\n  }\n\n  render() {\n    const hasMoments = this.props.moments.length\n    const symbol = hasMoments ? \"# \" : \". \";\n    const hoverable = hasMoments ? \"hoverable\" : \"\";\n\n    return (\n      <span\n        className={`Dot ${hoverable} ${this.props.highlight}`}\n        onClick={this.handleClick}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        {symbol}\n      </span>\n    )\n  }\n}\n\nexport default Dot;\n","import React, { Component } from 'react';\nimport Dot from './Dot';\n\nclass Calendar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dates: null\n    };\n  }\n\n  componentDidMount() {\n    this.makeDates();\n  }\n\n  makeDates() {\n    const current = new Date(2019, 0, 1);\n    const end = new Date(2020, 0, 1);\n    const dates = [];\n\n    // Set the current date to be the Sunday before the new year.\n    current.setDate(current.getDate() - current.getDay());\n\n    while (current < end) {\n      dates.push(new Date(current));\n      current.setDate(current.getDate() + 1);\n    }\n\n    this.setState({ dates });\n  }\n\n  // Returns an array of <Dot/> components (with <br/> elements)\n  makeDots() {\n    if (!this.state.dates) return;\n\n    const dots = [];\n\n    // For each date in state, make a dot; add moment data if applicable\n    for (let date of this.state.dates) {\n      const moments = this.findMoments(date);\n      const highlight = this.findHighlight(moments);\n\n      dots.push(<Dot\n        key={date.toString()}\n        moments={moments}\n        highlight={highlight}\n        handlers={this.props.handlers}\n      />)\n\n      // If the date is a Saturday, add a line break\n      if (date.getDay() === 6) {\n        dots.push(\n          <br key={`br-${date.toString()}`} />\n        );\n      }\n    }\n\n    return dots;\n  }\n\n  // Returns an array of the moments that took place on the given date\n  findMoments(date) {\n    const dateMoments = [];\n    const moments = this.props.appState.momentsIndex;\n\n    for (let m in moments) {\n      // If the moment date matches the given date, add it to our array\n      if (moments[m].date.getTime() === date.getTime()) {\n        dateMoments.push(moments[m])\n      }\n    }\n\n    return dateMoments;\n  }\n\n  // returns \"yellow\" or \"black\" or \"\"\n  findHighlight(moments) {\n    let highlight = \"\";\n    const appState = this.props.appState;\n    const selectedGuest = appState.guestHovered || appState.guestClicked;\n    const guestMoments = selectedGuest && appState.guestsIndex[selectedGuest].moment_ids;\n\n    // The dot should be yellow if a moment that it represents is hovered or\n    // clicked anywhere; or if a moment that it represents is included in the\n    // list of guest moments\n    if (\n      this.includesMoments(moments, appState.momentsHovered) ||\n      this.includesMoments(moments, appState.momentsClicked) ||\n      this.includesMoments(moments, guestMoments)\n    ) {\n      highlight = \"yellow\";\n    }\n\n    // GUEST CLICKED && MOMENT HOVERED\n    // The dot should be black if a guest is clicked and a guest moment is\n    // hovered.\n    if (\n      appState.guestClicked &&\n      this.includesMoments(moments, appState.momentsHovered) &&\n      this.includesMoments(moments, guestMoments)\n    ) {\n      highlight = \"black\";\n    }\n\n    return highlight;\n  }\n\n  includesMoments(moments, array) {\n    if (array) {\n      for (let m of moments) {\n        if (array.includes(m.id)) return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    return (\n      <div className=\"Calendar\">\n        {this.makeDots()}\n      </div>\n    )\n  }\n}\n\nexport default Calendar;\n","import React, { Component } from 'react';\n\nconst MOMENT = \"moment\";\nconst GUEST = \"guest\";\n\nclass Display extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCloseClick = this.handleCloseClick.bind(this);\n    this.handleGuestMouseEnter = this.handleGuestMouseEnter.bind(this);\n    this.handleGuestMouseLeave = this.handleGuestMouseLeave.bind(this);\n    this.handleGuestClick = this.handleGuestClick.bind(this);\n    this.handleMomentMouseEnter = this.handleMomentMouseEnter.bind(this);\n    this.handleMomentMouseLeave = this.handleMomentMouseLeave.bind(this);\n    this.handleMomentClick = this.handleMomentClick.bind(this);\n  }\n\n  handleCloseClick(e) {\n    this.props.guest ?\n      this.props.handlers.updateGuestClicked(null) :\n      this.props.handlers.updateMomentsClicked([]);\n  }\n\n  handleGuestMouseEnter(e) {\n    this.props.handlers.updateGuestHovered(parseInt(e.target.id));\n  }\n\n  handleGuestMouseLeave(e) {\n    this.props.handlers.updateGuestHovered(null);\n  }\n\n  handleGuestClick(e) {\n    this.props.handlers.updateGuestClicked(parseInt(e.target.id));\n    // Wipe out the hovered guest here or it will never happen\n    this.props.handlers.updateGuestHovered(null);\n  }\n\n  handleMomentMouseEnter(e) {\n    this.props.handlers.updateMomentsHovered([parseInt(e.target.id)]);\n  }\n\n  handleMomentMouseLeave(e) {\n    this.props.handlers.updateMomentsHovered([]);\n  }\n\n  handleMomentClick(e) {\n    this.props.handlers.updateMomentsClicked([parseInt(e.target.id)]);\n    // Wipe out the hovered moment here or it will never happen\n    this.props.handlers.updateMomentsHovered([]);\n  }\n\n  isHovered(type, object) {\n    const appState = this.props.appState;\n\n    if (type === GUEST) {\n      return appState.guestHovered && appState.guestHovered === object.id;\n    }\n\n    if (type === MOMENT) {\n      return appState.momentsHovered && appState.momentsHovered.includes(object.id);\n    }\n  }\n\n  renderGuestMoments(guest) {\n    if (guest.moments && guest.moments.length > 0) {\n      return guest.moments.map((moment) => {\n        if (!moment) return null;\n        const dateString = moment.date.toDateString().replace(' 2019', '');\n        const black = this.isHovered(MOMENT, moment) ? \"black\" : \"\";\n\n        return (\n          <li\n            key={moment.id}\n            id={moment.id}\n            className={`guestMoment ${black}`}\n            onMouseEnter={this.handleMomentMouseEnter}\n            onMouseLeave={this.handleMomentMouseLeave}\n            onClick={this.handleMomentClick}\n          >\n            {dateString} — {moment.title || moment.moment_type}\n          </li>\n        )\n      })\n    }\n  }\n\n  renderGuest() {\n    const guest = this.props.guest;\n    return (\n      <div className=\"guest\">\n        <div>{guest.name}</div>\n        <div>\n          <div>Moments: {guest.moments.length}</div>\n          <ul>\n            {this.renderGuestMoments(guest)}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n\n  renderMomentGuests(moment) {\n    if (moment.guests && moment.guests.length > 0) {\n      return moment.guests.map((guest) => {\n        if (!guest) return null;\n        const yellow = this.isHovered(GUEST, guest) ? \"yellow\" : \"\";\n        return (\n          <li\n            key={guest.id}\n            id={guest.id}\n            className={`momentGuest ${yellow}`}\n            onMouseEnter={this.handleGuestMouseEnter}\n            onMouseLeave={this.handleGuestMouseLeave}\n            onClick={this.handleGuestClick}\n          >\n            {guest.name}\n          </li>\n        )\n      })\n    }\n  }\n\n  renderMoments() {\n    if (this.props.moments && this.props.moments.length > 0) {\n      const moments = this.props.moments.map((moment, i) => {\n        return (\n          <div key={i} className=\"moment\">\n            { moment.title || moment.moment_type }\n            <ul>\n              {this.renderMomentGuests(moment)}\n            </ul>\n            { i >= this.props.moments.length - 1 ? \"\" : <hr/> }\n          </div>\n        )\n      });\n\n      return (\n        <div>\n          <div className=\"momentDate\">\n            {this.props.moments[0].date.toDateString()}\n          </div>\n          {moments}\n        </div>\n      )\n    }\n\n    return \"← hover over a #\"\n  }\n\n  renderClose() {\n    const appState = this.props.appState;\n\n    if (\n      (appState.momentsClicked && appState.momentsClicked.length > 0) ||\n      appState.guestClicked\n    ) {\n      return (\n        <div className=\"close\" onClick={this.handleCloseClick}>x </div>\n      )\n    }\n  }\n\n  render() {\n    const content = this.props.guest ? this.renderGuest() : this.renderMoments();\n\n    return (\n      <div className=\"Display\">\n        {content}\n        {this.renderClose()}\n      </div>\n    )\n  }\n}\n\nexport default Display;\n","import React, { Component } from 'react';\nimport Calendar from './Calendar';\nimport Display from './Display';\n\nclass DataViz2019 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      momentsIndex: {}, // { id: {id, date, guestIds: [id, id id] ...} ... }\n      guestsIndex: {}, // { id: {id, name, full_name, momentIds: [id, id id] ...} ... }\n      momentsHovered: [], // [ id, id, id ... ]\n      momentsClicked: [], // [ id, id, id ... ]\n      guestHovered: null, // id\n      guestClicked: null // id\n    };\n\n    this.handlers = {\n      updateMomentsHovered: this.updateMomentsHovered.bind(this),\n      updateMomentsClicked: this.updateMomentsClicked.bind(this),\n      updateGuestHovered: this.updateGuestHovered.bind(this),\n      updateGuestClicked: this.updateGuestClicked.bind(this)\n    }\n  }\n\n  componentDidMount() {\n    const moments = require('./moments');\n    const converted = this.convertDates(moments);\n    this.setState({ momentsIndex: converted });\n\n    const guests = require('./guests');\n    this.setState({ guestsIndex: guests }, this.setGuest);\n  }\n\n  // Converts the dates from the server (ruby) into javascript\n  convertDates(moments) {\n    for (let m in moments) {\n      const dateArray = moments[m].date.split(\"-\")\n      moments[m].date = new Date(`${dateArray[0]}/${dateArray[1]}/${dateArray[2]}`);\n    }\n\n    return moments;\n  }\n\n  setGuest() {\n    const name = this.props.location.hash.replace(\"#\",\"\");\n    if (name) {\n      const guests = this.state.guestsIndex;\n      const guest = Object.keys(guests).find((guestId) => {\n        return guests[guestId].name.toLowerCase() === name;\n      })\n\n      if (guest) {\n        this.setState({ guestClicked: guest }, () => {\n          this.setState({ loading: false })\n        });\n      }\n    }\n  }\n\n  updateMomentsHovered(momentIds) {\n    this.setState({ momentsHovered: momentIds });\n  }\n\n  // If you don’t want the side-effect of clearing the guests, pass a falsy\n  // second argument.\n  updateMomentsClicked(momentIds, clearGuests = true) {\n    this.setState({ momentsClicked: momentIds });\n    // Clear out guest clicked, too\n    if (clearGuests) this.updateGuestClicked(null);\n  }\n\n  updateGuestHovered(guestId) {\n    this.setState({ guestHovered: guestId });\n  }\n\n  updateGuestClicked(guestId) {\n    this.setState({ guestClicked: guestId });\n  }\n\n  momentsDisplayed() {\n    const clicked = this.state.momentsClicked;\n    const hovered = this.state.momentsHovered;\n    if (!clicked && !hovered) return [];\n\n    if (clicked && clicked.length > 0) {\n      return this.weaveMoments(clicked)\n    }\n\n    if (hovered && hovered.length > 0) {\n      return this.weaveMoments(hovered)\n    }\n\n    return [];\n  }\n\n  // Given a list of moment ids, get their moment objects from the momentIndex\n  // and weave in the guests.\n  weaveMoments(ids) {\n    const moments = this.hydrateList(ids, this.state.momentsIndex);\n\n    for (let m of moments) {\n      m.guests = this.hydrateList(m.guest_ids, this.state.guestsIndex);\n    }\n\n    return moments;\n  }\n\n  guestDisplayed() {\n    if (!this.state.guestClicked) return null;\n\n    // Make a copy of the guest from the index and hydrate the list of moments\n    const guest = {...this.state.guestsIndex[this.state.guestClicked]};\n    guest.moments = this.hydrateList(guest.moment_ids, this.state.momentsIndex);\n\n    return guest;\n  }\n\n  // Given a list of ids and an object to look them up in, return an array of\n  // the looked-up values\n  hydrateList(ids, index) {\n    return ids.map((id) => {\n      // return a copy, not the real thing\n      return {...index[id]};\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"DataViz2019\">\n        <div className=\"fullHeightContainer\">\n          <Calendar\n            appState={this.state}\n            handlers={this.handlers}\n          />\n        </div>\n        <div className=\"fullHeightContainer\">\n          <Display\n            moments={this.momentsDisplayed()}\n            guest={this.guestDisplayed()}\n            appState={this.state}\n            handlers={this.handlers}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DataViz2019;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport DataViz2019 from './DataViz2019';\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path='/' component={DataViz2019} />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}